(function(a) {
	a.extend(a.validator.messages, {
		required : "必填信息",
		remote : "请修正该信息",
		email : "请输入正确格式的电子邮件",
		url : "请输入合法的网址",
		date : "请输入合法的日期",
		dateISO : "请输入合法的日期 (ISO).",
		number : "请输入合法的数字",
		digits : "只能输入整数",
		creditcard : "请输入合法的信用卡号",
		equalTo : "请再次输入相同的值",
		accept : "请输入拥有合法后缀名的字符串",
		maxlength : a.validator.format("请输入一个长度最多是 {0} 的字符串"),
		minlength : a.validator.format("请输入一个长度最少是 {0} 的字符串"),
		rangelength : a.validator.format("请输入一个长度介于 {0} 和 {1} 之间的字符串"),
		range : a.validator.format("请输入一个介于 {0} 和 {1} 之间的值"),
		max : a.validator.format("请输入一个最大为 {0} 的值"),
		min : a.validator.format("请输入一个最小为 {0} 的值")
	})
}(jQuery));
jQuery.validator.addMethod("ip", function(b, a) {
	return this.optional(a)
			|| (/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/.test(b) && (RegExp.$1 < 256
					&& RegExp.$2 < 256 && RegExp.$3 < 256 && RegExp.$4 < 256))
}, "请输入合法的IP地址");
jQuery.validator.addMethod("abc", function(b, a) {
	return this.optional(a) || /^[a-zA-Z0-9_]*$/.test(b)
}, "请输入字母数字或下划线");
jQuery.validator.addMethod("username", function(b, a) {
	return this.optional(a) || /^[a-zA-Z0-9][a-zA-Z0-9_]{2,19}$/.test(b)
}, "3-20位字母或数字开头，允许字母数字下划线");


jQuery.validator.addMethod("uPassword", function(b, a) {
	return this.optional(a) || /^[a-zA-Z0-9_]{2,30}$/.test(b)
}, "密码只能为字母，数字，下划线（2-30位）");

jQuery.validator.addMethod("nPassword", function(b, a) {
	return this.optional(a) || /(?=.*[a-zA-Z])(?=.*[0-9])(?=.*?[-!\\(\\)\\~@#$%\\^\\&\\*_\\+\\-\\=])[a-zA-Z0-9-!\\(\\)\\~@#$%\\^\\&\\*_\\+\\-\\=]{10,20}/.test(b)
}, "必含字母数字及特殊字符(10-20位),特殊字符[~!@#$%^&*()_+=-]");

jQuery.validator.addMethod("password", function(b, a) {
	return this.optional(a) || /.{2,30}/.test(b)
}, "密码长度错误（2-30位）");

jQuery.validator.addMethod("money", function(b, a) {
	return this.optional(a) || /^\d+(.\d{1,2})?$/.test(b)
}, "请输入正确的数字格式");

jQuery.validator.addMethod("noEqualTo", function(b, a, c) {
	return b != $(c).val()
}, "请再次输入不同的值");
jQuery.validator.addMethod("realName", function(b, a) {
	return this.optional(a) || /^[\u4e00-\u9fa5]{2,30}$/.test(b)
}, "姓名只能为2-30个汉字");
jQuery.validator.addMethod("userName", function(b, a) {
	return this.optional(a) || /^[\u0391-\uFFE5\w]+$/.test(b)
}, "登录名只能包括中文字、英文字母、数字和下划线");
jQuery.validator.addMethod("channelCode", function(b, a) {
	return this.optional(a) || /^[a-z]{2,8}$/.test(b)
}, "渠道代码只能输入2~8个小字字母");
jQuery.validator.addMethod("mobile", function(c, a) {
	var b = c.length;
	return this.optional(a)
			|| (b == 11 && /^(((13[0-9]{1})|(14[0-9]{1})|(15[0-9]{1})|(16[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8})$/.test(c))
}, "请正确填写您的手机号码");
jQuery.validator.addMethod("simplePhone", function(c, b) {
	var a = /^(\d{3,4}-?)?\d{7,9}$/g;
	return this.optional(b) || (a.test(c))
}, "请正确填写您的电话号码");
jQuery.validator.addMethod("fax", function(c, b) {
	var a = /^(\d{3,4}-?)?\d{7,9}$/g;
	return this.optional(b) || (a.test(c))
}, "请正确填写您的传真号码");
jQuery.validator.addMethod("phone", function(c, b) {
	var a = /(^0[1-9]{1}\d{9,10}$)|(^1[3,5,8]\d{9}$)/g;
	return this.optional(b) || (a.test(c))
}, "格式为:固话为区号(3-4位)号码(7-9位),手机为:13,15,18号段");
jQuery.validator.addMethod("zipCode", function(c, b) {
	var a = /^[0-9]{6}$/;
	return this.optional(b) || (a.test(c))
}, "请正确填写您的邮政编码");
jQuery.validator.addMethod("qq", function(c, b) {
	var a = /^[1-9][0-9]{4,}$/;
	return this.optional(b) || (a.test(c))
}, "请正确填写您的QQ号码");
jQuery.validator.addMethod("smsCode", function(c, b) {
	var a = /^[0-9]{6}$/;
	return this.optional(b) || (a.test(c))
}, "请输入正确的手机验证码(6位数字)");
jQuery.validator.addMethod("card", function(b, a) {
	return this.optional(a) || checkIdcard(b)
}, "请输入正确的身份证号码(15-18位)");
//校验身份证好
jQuery.validator.addMethod("isCheck",function(value, element) {
	return $(element).is(":checked");
},"请选择");

jQuery.validator.addMethod("bankaccount", function(b, a) {
	return this.optional(a) || luhmCheck(b)
}, "请输入正确的银行卡号(16/19位)");

jQuery.validator.addMethod("percentage", function(b, a) {
	return this.optional(a) || /^[0-9]{1,2}(\.[0-9]{1,2})?$/.test(b);
}, "请输入正确百分比");

jQuery.validator.addMethod("phoneOrEmail", function(c, b) {
	var phone = /^(((13[0-9]{1})|(14[0-9]{1})|(15[0-9]{1})|(16[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8})$/i;
	var email = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
	
	return this.optional(b) || (c.length == 11 &&phone.test(c)) || (email.test(c))
}, "请输入合法的手机号或者邮箱");


function checkIdcard(d) {
	d = d.toString();
	var f = new Array(true, false, false, false, false);
	var e = {
		11 : "北京",
		12 : "天津",
		13 : "河北",
		14 : "山西",
		15 : "内蒙古",
		21 : "辽宁",
		22 : "吉林",
		23 : "黑龙江",
		31 : "上海",
		32 : "江苏",
		33 : "浙江",
		34 : "安徽",
		35 : "福建",
		36 : "江西",
		37 : "山东",
		41 : "河南",
		42 : "湖北",
		43 : "湖南",
		44 : "广东",
		45 : "广西",
		46 : "海南",
		50 : "重庆",
		51 : "四川",
		52 : "贵州",
		53 : "云南",
		54 : "西藏",
		61 : "陕西",
		62 : "甘肃",
		63 : "青海",
		64 : "宁夏",
		65 : "新疆",
		71 : "台湾",
		81 : "香港",
		82 : "澳门",
		91 : "国外"
	};
	var d, g, b;
	var c, h;
	var a = new Array();
	a = d.split("");
	if (e[parseInt(d.substr(0, 2))] == null) {
		return f[4]
	}
	switch (d.length) {
	case 15:
		if ((parseInt(d.substr(6, 2)) + 1900) % 4 == 0
				|| ((parseInt(d.substr(6, 2)) + 1900) % 100 == 0 && (parseInt(d
						.substr(6, 2)) + 1900) % 4 == 0)) {
			ereg = /^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$/
		} else {
			ereg = /^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$/
		}
		if (ereg.test(d)) {
			return f[0]
		} else {
			return f[2]
		}
		break;
	case 18:
		if (parseInt(d.substr(6, 4)) % 4 == 0
				|| (parseInt(d.substr(6, 4)) % 100 == 0 && parseInt(d.substr(6,
						4)) % 4 == 0)) {
			ereg = /^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$/
		} else {
			ereg = /^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$/
		}
		if (ereg.test(d)) {
			c = (parseInt(a[0]) + parseInt(a[10])) * 7
					+ (parseInt(a[1]) + parseInt(a[11])) * 9
					+ (parseInt(a[2]) + parseInt(a[12])) * 10
					+ (parseInt(a[3]) + parseInt(a[13])) * 5
					+ (parseInt(a[4]) + parseInt(a[14])) * 8
					+ (parseInt(a[5]) + parseInt(a[15])) * 4
					+ (parseInt(a[6]) + parseInt(a[16])) * 2 + parseInt(a[7])
					* 1 + parseInt(a[8]) * 6 + parseInt(a[9]) * 3;
			g = c % 11;
			h = "F";
			b = "10X98765432";
			h = b.substr(g, 1);
			if (h == a[17]) {
				return f[0]
			} else {
				return f[3]
			}
		} else {
			return f[2]
		}
		break;
	default:
		return f[1];
		break
	}
};

function luhmCheck(bankno){
	if (bankno.length < 16 || bankno.length > 19) {
		return false;
	}
	var num = /^\d*$/;  //全数字
	if (!num.exec(bankno)) {
		return false;
	}
	//开头6位
	var strBin="10,18,30,35,37,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,62,65,68,69,84,87,88,94,95,98,99";    
	if (strBin.indexOf(bankno.substring(0, 2))== -1) {
		return false;
	}
    var lastNum=bankno.substr(bankno.length-1,1);//取出最后一位（与luhm进行比较）

    var first15Num=bankno.substr(0,bankno.length-1);//前15或18位
    var newArr=new Array();
    for(var i=first15Num.length-1;i>-1;i--){    //前15或18位倒序存进数组
        newArr.push(first15Num.substr(i,1));
    }
    var arrJiShu=new Array();  //奇数位*2的积 <9
    var arrJiShu2=new Array(); //奇数位*2的积 >9
    
    var arrOuShu=new Array();  //偶数位数组
    for(var j=0;j<newArr.length;j++){
        if((j+1)%2==1){//奇数位
            if(parseInt(newArr[j])*2<9)
            arrJiShu.push(parseInt(newArr[j])*2);
            else
            arrJiShu2.push(parseInt(newArr[j])*2);
        }
        else //偶数位
        arrOuShu.push(newArr[j]);
    }
    
    var jishu_child1=new Array();//奇数位*2 >9 的分割之后的数组个位数
    var jishu_child2=new Array();//奇数位*2 >9 的分割之后的数组十位数
    for(var h=0;h<arrJiShu2.length;h++){
        jishu_child1.push(parseInt(arrJiShu2[h])%10);
        jishu_child2.push(parseInt(arrJiShu2[h])/10);
    }        
    
    var sumJiShu=0; //奇数位*2 < 9 的数组之和
    var sumOuShu=0; //偶数位数组之和
    var sumJiShuChild1=0; //奇数位*2 >9 的分割之后的数组个位数之和
    var sumJiShuChild2=0; //奇数位*2 >9 的分割之后的数组十位数之和
    var sumTotal=0;
    for(var m=0;m<arrJiShu.length;m++){
        sumJiShu=sumJiShu+parseInt(arrJiShu[m]);
    }
    
    for(var n=0;n<arrOuShu.length;n++){
        sumOuShu=sumOuShu+parseInt(arrOuShu[n]);
    }
    
    for(var p=0;p<jishu_child1.length;p++){
        sumJiShuChild1=sumJiShuChild1+parseInt(jishu_child1[p]);
        sumJiShuChild2=sumJiShuChild2+parseInt(jishu_child2[p]);
    }      
    //计算总和
    sumTotal=parseInt(sumJiShu)+parseInt(sumOuShu)+parseInt(sumJiShuChild1)+parseInt(sumJiShuChild2);
    
    //计算Luhm值
    var k= parseInt(sumTotal)%10==0?10:parseInt(sumTotal)%10;        
    var luhm= 10-k;
    
    if(lastNum==luhm){
    $("#banknoInfo").html("Luhm验证通过");
    return true;
    }
    else{
    $("#banknoInfo").html("银行卡号必须符合Luhm校验");
    return false;
    }        
}

